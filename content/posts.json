{"having-a-doula-their-benefits-and-purpose-2018-04-12":{"layout":"blog","title":"Having A Doula: Their Benefits And Purpose","date":"2018-04-12T18:02:46-07:00","thumbnail":"/static/img/uploads/safe_image-2.jpg","rating":"5","body":"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Recusandae blanditiis doloremque, officiis aliquam"},"test-2018-04-01":{"layout":"blog","title":"Doula Support For Pregnant Women Could Improve Care, Reduce Costs","date":"2018-04-01T12:36:25-07:00","thumbnail":"/static/img/uploads/safe_image-1.jpg","rating":"5","body":"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nostrum at, culpa inventore quis,"},"test-2018-04-02":{"layout":"blog","title":"New Guidelines Establish The Rights Of Women When Giving Birth","date":"2018-04-02T12:36:25-07:00","thumbnail":"/static/img/uploads/safe_image.jpg","body":"Note: By the time this post is written, the Node.js is on version 0.6.10. Therefore anything in this post may or may not valid in the newer versions.\n\nNode.js file system API provide a bunch of functions to read/write files. One of them is the fs.mkdir(path, \\[mode], \\[callback]). However, this function itself does not provide any option for you to create a directory if the parents folder is missing, it’ll trigger an exception if you trying to do so. In another word, you can’t do something like “mkdir -p DIR”.\n\nHowever, the callback function is an extreamly useful feature to extend this function. In case the fs.mkdir failed, it passes an error object into the callback function. Like this:\n\nYou’ll see it print an object looks like:\n\n\n\n{ \\[Error: ENOENT, no such file or directory ‘parent/child’] errno: 34, code: ‘ENOENT’, path: ‘parent/child’ }\n\nGood, now we know in the case of missing directory, we’ll get error code 34. What if we catch the error and try to recursively create it’s parent, then create the directory again? Everybody deserve a second chance, right?"}}